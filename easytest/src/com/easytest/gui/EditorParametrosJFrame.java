/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * EditorParametrosJFrame.java
 *
 * Created on 11/03/2012, 10:54:12
 */
package com.easytest.gui;

import com.easytest.model.vo.TestCase;
import com.easytest.gui.listener.EditorParametrosListener;
import java.util.Iterator;
import java.util.Map;
import java.util.Vector;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author gilberto
 */
public class EditorParametrosJFrame extends javax.swing.JFrame {

    /**
     * Creates new form EditorParametrosJFrame
     */
    public EditorParametrosJFrame(TestCase testCase) {
        this.testCase = testCase;
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonsJPanel = new javax.swing.JPanel();
        adicionarJButton = new javax.swing.JButton();
        removerJButton = new javax.swing.JButton();
        gravarJButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        parametrosJTable = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Editor de parêmetros");
        setModalExclusionType(java.awt.Dialog.ModalExclusionType.APPLICATION_EXCLUDE);
        setResizable(false);

        adicionarJButton.setText("Adicionar");

        removerJButton.setText("Remover");

        gravarJButton.setText("Gravar");

        javax.swing.GroupLayout buttonsJPanelLayout = new javax.swing.GroupLayout(buttonsJPanel);
        buttonsJPanel.setLayout(buttonsJPanelLayout);
        buttonsJPanelLayout.setHorizontalGroup(
            buttonsJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(buttonsJPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(adicionarJButton)
                .addGap(2, 2, 2)
                .addComponent(removerJButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(gravarJButton)
                .addContainerGap(19, Short.MAX_VALUE))
        );
        buttonsJPanelLayout.setVerticalGroup(
            buttonsJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(buttonsJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(adicionarJButton)
                .addComponent(removerJButton)
                .addComponent(gravarJButton))
        );

        adicionarJButton.setActionCommand("adicionar");
        adicionarJButton.addActionListener(listener);
        removerJButton.setActionCommand("remover");
        removerJButton.addActionListener(listener);
        gravarJButton.setActionCommand("gravar");
        gravarJButton.addActionListener(listener);

        parametrosJTable.setModel(getTableModelParametros());
        jScrollPane1.setViewportView(parametrosJTable);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 469, Short.MAX_VALUE)
                    .addComponent(buttonsJPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 275, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(buttonsJPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    /**
     * @param args the command line arguments
     */
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton adicionarJButton;
    private javax.swing.JPanel buttonsJPanel;
    private javax.swing.JButton gravarJButton;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable parametrosJTable;
    private javax.swing.JButton removerJButton;
    // End of variables declaration//GEN-END:variables
    //declarações específicas da janela
    private EditorParametrosListener listener = new EditorParametrosListener(this);
    private DefaultTableModel tableModelParametros = null;
    private TestCase testCase;

    //código implementado para complementação do projeto
    //retorna a lista de valores que deve ser populada na tabela
    public DefaultTableModel getTableModelParametros() {

        if (tableModelParametros == null) {
            //valores mantidos nas linhas

            Vector<Vector<Object>> data = new Vector<Vector<Object>>();
            if (testCase != null) {
                Map<String, Object> map = testCase.getParametersReport();
                if (map != null) {
                    Iterator<String> keys = map.keySet().iterator();
                    while (keys.hasNext()) {
                        String k = keys.next();
                        Vector<Object> elm = new Vector<Object>();
                        elm.add(k);
                        elm.add(map.get(k));
                        //adiciona uma linha
                        data.addElement(elm);
                    }
                }
            }

            //nomes das colunas
            Vector<String> columnNames = new Vector<String>();
            columnNames.add("Parâmetro");
            columnNames.add("Valor");

            tableModelParametros = new DefaultTableModel(data, columnNames);
        }
        return tableModelParametros;

    }

    public JTable getParametrosJTable() {
        return parametrosJTable;
    }

    public TestCase getCasoTeste() {
        return testCase;
    }
}
